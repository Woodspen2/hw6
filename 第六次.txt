【源代码】
add_gaussian_noise.m(题目1添加高斯噪声)
I=imread('lena.bmp');
figure(1);
imshow(I);
title('源图像lena.bmp');
imwrite(I,'lena原始图像.bmp');
I2=imnoise(I,'gaussian',0.5,0.01);
figure(2);
imshow(I2);
title('加入gaussian噪声后的lena.bmp');
imwrite(I2,'lena加入gaussian噪声后(u=0.5，s^2=0.01).bmp');

suanshujunzhi_filter.m(题目1算术均值滤波恢复图像)
I=imread('lena_gaussian_noise.bmp');
figure(1);
imshow(I);
title('lena加入gaussian噪声后(u=0，s^2=0.01).bmp');
imwrite(I,'lena加入gaussian噪声后(u=0，s^2=0.01).bmp');
n=5;  
h=1/n^2.*ones(n,n);
I2=conv2(I,h,'same'); 
I2=uint8(I2);
figure(2);
imshow(I2); 
title('算术均值滤波的结果（5x5）');
imwrite(I2,'算术均值滤波的结果（5x5）.bmp');

median_filter.m(题目1中值滤波恢复图像)
I=imread('lena_gaussian_noise.bmp');
figure(1);
imshow(I);
title('lena加入gaussian噪声后(u=0，s^2=0.01).bmp');
imwrite(I,'lena加入gaussian噪声后(u=0，s^2=0.01).bmp');
figure(2);
n=5; 
a=ones(n,n);
p=size(I);   
x1=double(I);
x2=x1;
for i=1:p(1)-n+1  
    for j=1:p(2)-n+1   
        c=x1(i:i+(n-1),j:j+(n-1));  
        e=c(1,:);      
        for u=2:n          
            e=[e,c(u,:)];           
        end
        mm=median(e);    
        x2(i+(n-1)/2,j+(n-1)/2)=mm;   
    end
end
I2=uint8(x2);
imshow(I2); 
title('中值滤波的结果（5x5）');
imwrite(I2,'中值滤波的结果（5x5）.bmp');





mohu_filter.m(题目2运动模糊滤波器)
I=imread('lena.bmp');
figure(1);
imshow(I);
title('lena.bmp原始图像');
imwrite(I,'lena原始图像.bmp');
f=double(I);     
F=fft2(f);      
F=fftshift(F);   
[M,N]=size(F);
a=0.1;b=0.1;T=1;
for u=1:M
    for v=1:N     H(u,v)=(T/(pi*(u*a+v*b)))*sin(pi*(u*a+v*b))*exp(-sqrt(-1)*pi*(u*a+v*b));
     G(u,v)=H(u,v)*F(u,v);
    end
end
G=ifftshift(G);
g=ifft2(G);
g=256.*g./max(max(g));
g=uint8(real(g));
figure(2);
imshow(g);
title('运动模糊化lena.bmp');
imwrite(g,'lena运动模糊的结果.bmp');
       
Wiener_filter.m(题目2维纳滤波器自编版)
I=imread('lena运动模糊+高斯噪声.bmp');
figure(1);
imshow(I);
title('lena运动模糊+高斯噪声');
imwrite(I,'lena运动模糊+高斯噪声.bmp');
g=double(I);     
G=fft2(g);      
G=fftshift(G);   
[M,N]=size(G);
a=0.1;b=0.1;T=1;K=0.0259;
for u=1:M
    for v=1:N   H(u,v)=(T/(pi*(u*a+v*b)))*sin(pi*(u*a+v*b))*exp(-sqrt(-1)*pi*(u*a+v*b));
     F(u,v)=1/H(u,v)*(abs(H(u,v)))^2/((abs(H(u,v)))^2+K)*G(u,v);
    end
end
F=ifftshift(F);
f=ifft2(F);
f=256.*f./max(max(f));
f=uint8(real(f));
figure(2);
imshow(f);
title('维纳滤波的将结果');
imwrite(f,'维纳滤波的结果(K=0.0259).bmp');

wiener_filter_k.m(题目2维纳滤波器寻找信噪比最大的K值)
I=imread('lena运动模糊+高斯噪声.bmp');
figure(1);
imshow(I);
title('lena运动模糊+高斯噪声');
imwrite(I,'lena运动模糊+高斯噪声.bmp');
g=double(I);     
G=fft2(g);      
G=fftshift(G);   
[M,N]=size(G);
a=0.1;b=0.1;T=1;i=1;
format long
for k=0.01:0.01:0.11
    for u=1:M
        for v=1:N    H(u,v)=(T/(pi*(u*a+v*b)))*sin(pi*(u*a+v*b))*exp(-sqrt(-1)*pi*(u*a+v*b));         F(u,v)=(1/H(u,v))*((abs(H(u,v)))^2/((abs(H(u,v)))^2+k))*G(u,v);
        end
    end
    F=ifftshift(F);
    f=ifft2(F);
    f=256.*f./max(max(f));
    f=uint8(real(f));
    figure;
    imshow(f);
    title('维纳滤波的结果');
    e=f-uint8(g);
    SNR(i)=sum(sum(g.^2))/sum(sum(e.^2));
    i=i+1;
end
idx=find(max(SNR))

wiener_filter_matlab.m(题目2维纳滤波器MATLAB版)
I=imread('lena.bmp');
H=fspecial('motion',50,45);
I1=imfilter(I,H,'circular','conv');
figure(1);
imshow(I1);
title('运动模糊后的lena.bmp(角度为45度)');
imwrite(I1,'lena运动模糊（调用matlab中的函数）.bmp');
I2=imnoise(I1,'gaussian',0,0.01);
figure(2)
imshow(I2);
title('加噪并模糊的lena.bmp');
imwrite(I2,'lena运动模糊+高斯噪声（调用matlab中的函数0.bmp');
figure(3);
noise=imnoise(zeros(size(I)),'gaussian',0,0.01);
NSR=sum(noise(:).^2)/sum(im2double(I(:)).^2);
I3=deconvwnr(I2,H,NSR);
imshow(I3);
title('维纳滤波的结果');
imwrite(I3,'lena维纳滤波的结果（调用MATLAB中的函数）.bmp');

yueshuzuixiaercheng_filter_matlab.m（题目2约束最小二乘滤波（MATLAB版））
I=imread('lena.bmp');
h=fspecial('motion',50,45);
I1=imfilter(I,h,'circular','conv');
I2=imnoise(I1,'gaussian',0,0.01);
figure(1);
imshow(I2);
title('lena运动模糊+高斯噪声');
imwrite(I2,'lena运动模糊+高斯噪声（MATLAB版）.bmp');
V=0.0001;
NoisePower=V*prod(size(I));
[g,LAGRA]=deconvreg(I1,h,NoisePower);
figure(2);
imshow(g);
title('约束最小二乘滤波的结果（MATLAB版）');
imwrite(g,'约束最小二乘滤波的结果（MATLAB版）.bmp');





题目3――椒盐噪声
f=imread('lena.bmp');
figure(1);
imshow(f);
title('原图');
f1=imnoise(f,'salt & pepper',0.1);
figure(2);
imshow(f1);
f1=double(f1);
title('加入椒盐噪声密度0.1');
w=fspecial('average',[3 3]);
f2=imfilter(f1,w);
f2=uint8(f2);
figure(3);
imshow(f2);
title('算术均值3*3滤波结果');
f3=medfilt2(f1,[3 3],'symmetric');
f3=uint8(f3);
figure(4);
imshow(f3);
title('中值滤波3*3结果');
f4=exp(imfilter(log(f1),ones(3,3),'replicate')).^(1/3/3);
f4=uint8(f4);
figure(5)
imshow(f4);
title('几何均值3*3滤波结果');
f5=3*3./imfilter(1./(f1+eps),ones(3,3),'replicate');
f5=uint8(f5);
figure(6)
imshow(f5);
title('调和均值3*3滤波结果');
q=1.5;
f6=imfilter(f1.^(q+1),ones(3,3),'replicate');
f6=f6./(imfilter(f1.^q,ones(3,3),'replicate')+eps);
f6=uint8(f6);
figure(7)
imshow(f6);
title('逆调和均值q=1.5滤波结果');
p=-2;
f7=imfilter(f1.^(p+1),ones(3,3),'replicate');
f7=f7./(imfilter(f1.^q,ones(3,3),'replicate')+eps);
f7=uint8(f7);
figure(8)
imshow(f7);
title('逆调和均值q=-1.5滤波结果');

